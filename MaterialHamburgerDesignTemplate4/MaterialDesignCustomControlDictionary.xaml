<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:materialDesignConverter="clr-namespace:MaterialDesignThemes.Wpf.Converters">
    <materialDesign:HintProxyFabricConverter x:Key="HintProxyFabricConverter"/>
    <materialDesignConverter:FontSizeToHintOffsetConverter x:Key="FontSizeToHintOffsetConverter"/>
    <Style x:Key="ComboBoxOutlineStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}">
        <Setter Property="materialDesign:TextFieldAssist.TextFieldCornerRadius" Value="4"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="materialDesign:TextFieldAssist.DecorationVisibility" Value="Collapsed"/>
        <Setter Property="materialDesign:HintAssist.FloatingOffset" Value="1,-24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot"
              Background="{TemplateBinding Background}"
              SnapsToDevicePixels="True">
                        <Border x:Name="textFieldBoxBorder" Background="{TemplateBinding Background}"
                                CornerRadius="{Binding Path=(materialDesign:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True"
                                BorderThickness="1" BorderBrush="{DynamicResource MaterialDesignTextAreaBorder}" 
                                Padding="16,0,16,0" Margin="-1">
                            <Grid x:Name="InnerRoot" >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="toggleButton"
                              Grid.ColumnSpan="2"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{StaticResource MaterialDesignComboBoxToggleButton}"/>
                                <Border x:Name="border" Padding="0 4 0 4" Margin="0,3,0,9">
                                    <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          Margin="{TemplateBinding Padding}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid x:Name="InputRoot" 
                              HorizontalAlignment="Left" >
                                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}" 
                                                          Margin="0,0,0,8"/>
                                            <ContentPresenter x:Name="contentPresenter"
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              IsHitTestVisible="False"/>
                                            <TextBox x:Name="PART_EditableTextBox" 
                                     IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                     HorizontalAlignment="Left"
                                     HorizontalContentAlignment="Stretch"
                                     Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                                     CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
                                     Visibility="Collapsed" />

                                            <materialDesign:SmartHint x:Name="Hint" 
                                           HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HintProxyFabricConverter}}"
                                           FontSize="{TemplateBinding FontSize}"
                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                           UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                           UseFloating="{Binding Path=(materialDesign:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                           FloatingScale="{Binding Path=(materialDesign:HintAssist.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                                           FloatingOffset="{Binding Path=(materialDesign:HintAssist.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}"
                                           HintOpacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                           Hint="{Binding Path=(materialDesign:HintAssist.Hint), RelativeSource={RelativeSource TemplatedParent}}" 
                                           >
                                            </materialDesign:SmartHint>
                                            
                                        </Grid>
                                        <StackPanel Orientation="Horizontal" Grid.Column="1"  >
                                            <TextBlock
                                FontSize="{TemplateBinding FontSize}"
                                Opacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                Text="{Binding Path=(materialDesign:TextFieldAssist.SuffixText), RelativeSource={RelativeSource TemplatedParent}}" 
                                />
                                            <Button x:Name="PART_ClearButton" Height="Auto" Padding="2,0,-6,0" Style="{DynamicResource MaterialDesignToolButton}">
                                                <Button.Visibility>
                                                    <MultiBinding Converter="{StaticResource ClearTextConverter}">
                                                        <Binding ElementName="Hint" Path="IsContentNullOrEmpty" Converter="{StaticResource NotConverter}"/>
                                                        <Binding Path="(materialDesign:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    </MultiBinding>
                                                </Button.Visibility>
                                                <materialDesign:PackIcon Margin="0" Kind="CloseCircle" />
                                            </Button>
                                        </StackPanel>
                                        
                                    </Grid>
                                </Border>
                                <Line x:Name="DashedLine" Grid.ColumnSpan="2" Grid.Column="0" VerticalAlignment="Bottom"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource InverseBoolToVisConverter}}"
                      StrokeThickness="{Binding BorderThickness.Bottom, ElementName=toggleButton, Converter={StaticResource DivisionMathConverter}, ConverterParameter=0.75}" StrokeDashArray="1,2.5" StrokeDashCap="Round"
                      X1="0" X2="{Binding ActualWidth, ElementName=toggleButton}" Y1="0" Y2="0" 
                      Stroke="{TemplateBinding BorderBrush}" Opacity="0.56" />
                                <materialDesign:Underline x:Name="Underline"
                               Grid.ColumnSpan="2"
                               materialDesign:TextFieldAssist.UnderlineBrush="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}"
                               IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                               Visibility="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"
                               Background="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                                <Canvas Grid.Column="0" VerticalAlignment="Bottom">
                                    <TextBlock Canvas.Top="2" FontSize="10" MaxWidth="{Binding ActualWidth, ElementName=toggleButton}"
                               Opacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                               Text="{Binding Path=(materialDesign:HintAssist.HelperText), RelativeSource={RelativeSource TemplatedParent}}" />
                                </Canvas>

                                <materialDesign:ComboBoxPopup x:Name="PART_Popup"
                                   Grid.Column="0"
                                   AllowsTransparency="true"
                                   Focusable="False"
                                   HorizontalOffset="-11.5"
                                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   PlacementTarget="{Binding ElementName=templateRoot}"
                                   SnapsToDevicePixels="True"
                                   UseLayoutRounding="True"
                                   Placement="Custom"
                                   PopupAnimation="Fade"
                                   VerticalOffset="0"
                                   DefaultVerticalOffset="5"
                                   DownVerticalOffset="-15.5"
                                   UpVerticalOffset="15"
                                   materialDesign:ColorZoneAssist.Mode="{Binding Path=(materialDesign:ColorZoneAssist.Mode), RelativeSource={RelativeSource TemplatedParent}}"
                                   Tag="{DynamicResource MaterialDesignPaper}"
                                   ClassicMode="{Binding Path=(materialDesign:ComboBoxAssist.ClassicMode), RelativeSource={RelativeSource TemplatedParent}}"
                                   UpContentTemplate="{StaticResource PopupContentUpTemplate}"
                                   DownContentTemplate="{StaticResource PopupContentDownTemplate}"
                                   ClassicContentTemplate="{StaticResource PopupContentClassicTemplate}">

                                    <ContentControl>
                                        <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                      MinHeight="1"
                                      Background="{Binding Background, ElementName=PART_Popup}">
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </ContentControl>
                                </materialDesign:ComboBoxPopup>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_Popup" Property="PopupPlacement" Value="{x:Static materialDesign:ComboBoxPopupPlacement.Classic}">
                            <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="{Binding Background, ElementName=PART_Popup}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="templateRoot" Property="Opacity" Value="0.56"/>
                            <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="materialDesign:HintAssist.IsFloating" Value="True">
                            <Setter TargetName="InnerRoot" Property="Margin" Value="0 11.5 0 0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="False"/>
                                <Condition Property="IsDropDownOpen" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Underline" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                                <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                                <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="0 24 0 0" />
                            <Setter TargetName="InnerRoot" Property="Margin" Value="0 -1.5 0 1.5" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                                <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocusWithin" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                                <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                                <Condition Property="IsKeyboardFocusWithin" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                                <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                            <Setter TargetName="border" Property="Margin" Value="0 24 0 0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                                <Condition Property="IsDropDownOpen" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Underline" Property="IsActive" Value="True"/>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                            <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="Validation.HasError" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                            <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="Validation.HasError" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="Underline" Property="Background" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Standard"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignPaper}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignBody}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Inverted"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignBody}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignPaper}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryLight" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueLightBrush}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryMid"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueMidBrush}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryDark"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueDarkBrush}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Accent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource SecondaryAccentBrush}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource SecondaryAccentForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Light"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignLightBackground}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignLightForeground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Dark"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignDarkBackground}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignDarkForeground}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignEmbeddedQuickDialogHost" TargetType="{x:Type materialDesign:DialogHost}">
        <Setter Property="DialogMargin" Value="35" />
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth5" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="materialDesign:DialogHost">
                    <Grid x:Name="DialogHostRoot" Focusable="False">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="PopupStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Closed" To="Open">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Popup" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="0" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentCoverGrid" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                                                <EasingDoubleKeyFrame Value="0.56" KeyTime="0:0:0.2">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_PopupContentElement" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.2">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleX">
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.2">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleY">
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.2">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Open" To="Closed">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Popup" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="0:0:0.3" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_ContentCoverGrid" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame Value="0.56" KeyTime="0" />
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.2">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_PopupContentElement" Storyboard.TargetProperty="Opacity">
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0" />
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.12" />
                                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.2">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleX">
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0" />
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.12" />
                                                <EasingDoubleKeyFrame Value="0.5" KeyTime="0:0:0.2">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleY">
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0" />
                                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.12" />
                                                <EasingDoubleKeyFrame Value="0.5" KeyTime="0:0:0.2">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseInOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Open">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Popup" Storyboard.TargetProperty="Visibility" 
                                                                       Duration="0">
                                            <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="0" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="PART_ContentCoverGrid" Storyboard.TargetProperty="Opacity"
                                                         Duration="0"
                                                         To=".56" />
                                        <DoubleAnimation Storyboard.TargetName="PART_PopupContentElement" Storyboard.TargetProperty="Opacity"
                                                         Duration="0"
                                                         To="1" />
                                        <DoubleAnimation Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleX"
                                                         Duration="0"
                                                         To="1" />
                                        <DoubleAnimation Storyboard.TargetName="CardScaleTransform" Storyboard.TargetProperty="ScaleY"
                                                         Duration="0"
                                                         To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Closed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Popup" Storyboard.TargetProperty="Visibility"
                                                                       Duration="0">
                                            <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="0" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="PART_ContentCoverGrid" Storyboard.TargetProperty="Opacity"
                                                         To="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter 
                            x:Name="ContentPresenter" Opacity="1"
                            Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" />

                        <Grid x:Name="PART_ContentCoverGrid" Background="{Binding OverlayBackground, RelativeSource={RelativeSource TemplatedParent}}" 
                              Opacity="0" IsHitTestVisible="False" Focusable="False">
                            <Grid.Style>
                                <Style TargetType="Grid">
                                    <Style.Triggers>
                                        <Trigger Property="Opacity" Value="0">
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Grid.Style>
                        </Grid>

                        <Grid x:Name="PART_Popup" materialDesign:ThemeAssist.Theme="{TemplateBinding DialogTheme}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <materialDesign:Card 
                                x:Name="PART_PopupContentElement" 
                                Margin="{TemplateBinding DialogMargin}"
                                materialDesign:ShadowAssist.ShadowDepth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowDepth)}"
                                UniformCornerRadius="4"
                                TextElement.Foreground="{DynamicResource MaterialDesignBody}"
                                TextElement.FontWeight="Regular"
                                TextElement.FontSize="13"
                                TextOptions.TextFormattingMode="Ideal"
                                TextOptions.TextRenderingMode="Auto"
                                FocusManager.IsFocusScope="False"
                                Foreground="{DynamicResource MaterialDesignBody}"
                                Focusable="True"
                                IsTabStop="False"
                                Opacity="0"
                                RenderTransformOrigin=".5,.5"
                                Content="{TemplateBinding DialogContent}"
                                ContentTemplate="{TemplateBinding DialogContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding DialogContentTemplateSelector}"
                                ContentStringFormat="{TemplateBinding DialogContentStringFormat}">
                                <materialDesign:Card.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="CardScaleTransform"
                                                        ScaleX="0"
                                                        ScaleY="0" />
                                    </TransformGroup>
                                </materialDesign:Card.RenderTransform>
                            </materialDesign:Card>
                        </Grid>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOpen" Value="True">
                            <Setter TargetName="ContentPresenter" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_ContentCoverGrid" Property="IsHitTestVisible" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxOutlineSmallStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}">
        <Setter Property="materialDesign:TextFieldAssist.TextFieldCornerRadius" Value="4"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="materialDesign:TextFieldAssist.DecorationVisibility" Value="Collapsed"/>
        <Setter Property="materialDesign:HintAssist.FloatingOffset" Value="1,-24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot"
              Background="{TemplateBinding Background}"
              SnapsToDevicePixels="True">
                        <Border x:Name="textFieldBoxBorder" Background="{TemplateBinding Background}"
                                CornerRadius="{Binding Path=(materialDesign:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True"
                                BorderThickness="1" BorderBrush="{DynamicResource MaterialDesignTextAreaBorder}" 
                                Padding="12,0,12,0" Margin="-1">
                            <Grid x:Name="InnerRoot" >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="toggleButton"
                              Grid.ColumnSpan="2"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{StaticResource MaterialDesignComboBoxToggleButton}"/>
                                <Border x:Name="border" Padding="0 4 0 4" >
                                    <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          Margin="{TemplateBinding Padding}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid x:Name="InputRoot" 
                              HorizontalAlignment="Left" >
                                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}" 
                                                          Margin="0,0,0,8"/>
                                            <ContentPresenter x:Name="contentPresenter"
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              IsHitTestVisible="False"/>
                                            <TextBox x:Name="PART_EditableTextBox" 
                                     IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                     HorizontalAlignment="Left"
                                     HorizontalContentAlignment="Stretch"
                                     Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                                     CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
                                     Visibility="Collapsed" />

                                            <materialDesign:SmartHint x:Name="Hint" 
                                           HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HintProxyFabricConverter}}"
                                           FontSize="{TemplateBinding FontSize}"
                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                           UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                           UseFloating="{Binding Path=(materialDesign:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                           FloatingScale="{Binding Path=(materialDesign:HintAssist.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                                           FloatingOffset="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FontSizeToHintOffsetConverter}}"
                                           HintOpacity="1"
                                           >
                                                <materialDesign:SmartHint.Hint>
                                                    <Border x:Name="HintBackgroundBorder" Background="{TemplateBinding Background}" CornerRadius="2" Padding="4,0">
                                                        <ContentPresenter 
                                                        x:Name="HintWrapper" Opacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                                        Content="{Binding Path=(materialDesign:HintAssist.Hint), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                    </Border>
                                                </materialDesign:SmartHint.Hint>
                                            </materialDesign:SmartHint>

                                        </Grid>
                                        <StackPanel Orientation="Horizontal" Grid.Column="1"  >
                                            <TextBlock
                                FontSize="{TemplateBinding FontSize}"
                                Opacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                Text="{Binding Path=(materialDesign:TextFieldAssist.SuffixText), RelativeSource={RelativeSource TemplatedParent}}" 
                                />
                                            <Button x:Name="PART_ClearButton" Height="Auto" Padding="2,0,-6,0" Style="{DynamicResource MaterialDesignToolButton}">
                                                <Button.Visibility>
                                                    <MultiBinding Converter="{StaticResource ClearTextConverter}">
                                                        <Binding ElementName="Hint" Path="IsContentNullOrEmpty" Converter="{StaticResource NotConverter}"/>
                                                        <Binding Path="(materialDesign:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    </MultiBinding>
                                                </Button.Visibility>
                                                <materialDesign:PackIcon Margin="0" Kind="CloseCircle" />
                                            </Button>
                                        </StackPanel>

                                    </Grid>
                                </Border>
                                <Line x:Name="DashedLine" Grid.ColumnSpan="2" Grid.Column="0" VerticalAlignment="Bottom"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource InverseBoolToVisConverter}}"
                      StrokeThickness="{Binding BorderThickness.Bottom, ElementName=toggleButton, Converter={StaticResource DivisionMathConverter}, ConverterParameter=0.75}" StrokeDashArray="1,2.5" StrokeDashCap="Round"
                      X1="0" X2="{Binding ActualWidth, ElementName=toggleButton}" Y1="0" Y2="0" 
                      Stroke="{TemplateBinding BorderBrush}" Opacity="0.56" />
                                <materialDesign:Underline x:Name="Underline"
                               Grid.ColumnSpan="2"
                               materialDesign:TextFieldAssist.UnderlineBrush="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}"
                               IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                               Visibility="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"
                               Background="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                                <Canvas Grid.Column="0" VerticalAlignment="Bottom">
                                    <TextBlock Canvas.Top="2" FontSize="10" MaxWidth="{Binding ActualWidth, ElementName=toggleButton}"
                               Opacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                               Text="{Binding Path=(materialDesign:HintAssist.HelperText), RelativeSource={RelativeSource TemplatedParent}}" />
                                </Canvas>

                                <materialDesign:ComboBoxPopup x:Name="PART_Popup"
                                   Grid.Column="0"
                                   AllowsTransparency="true"
                                   Focusable="False"
                                   HorizontalOffset="-11.5"
                                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   PlacementTarget="{Binding ElementName=templateRoot}"
                                   SnapsToDevicePixels="True"
                                   UseLayoutRounding="True"
                                   Placement="Custom"
                                   PopupAnimation="Fade"
                                   VerticalOffset="0"
                                   DefaultVerticalOffset="5"
                                   DownVerticalOffset="-15.5"
                                   UpVerticalOffset="15"
                                   materialDesign:ColorZoneAssist.Mode="{Binding Path=(materialDesign:ColorZoneAssist.Mode), RelativeSource={RelativeSource TemplatedParent}}"
                                   Tag="{DynamicResource MaterialDesignPaper}"
                                   ClassicMode="{Binding Path=(materialDesign:ComboBoxAssist.ClassicMode), RelativeSource={RelativeSource TemplatedParent}}"
                                   UpContentTemplate="{StaticResource PopupContentUpTemplate}"
                                   DownContentTemplate="{StaticResource PopupContentDownTemplate}"
                                   ClassicContentTemplate="{StaticResource PopupContentClassicTemplate}">

                                    <ContentControl>
                                        <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                      MinHeight="1"
                                      Background="{Binding Background, ElementName=PART_Popup}">
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </ContentControl>
                                </materialDesign:ComboBoxPopup>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_Popup" Property="PopupPlacement" Value="{x:Static materialDesign:ComboBoxPopupPlacement.Classic}">
                            <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="{Binding Background, ElementName=PART_Popup}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="templateRoot" Property="Opacity" Value="0.56"/>
                            <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="materialDesign:HintAssist.IsFloating" Value="True">
                            <Setter TargetName="InnerRoot" Property="Margin" Value="0 2 0 2" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="False"/>
                                <Condition Property="IsDropDownOpen" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Underline" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                                <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                                <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="0 0 0 0" />
                            <Setter TargetName="InnerRoot" Property="Margin" Value="0 2 0 2" />
                            
                            <Setter TargetName="HintBackgroundBorder" Property="Padding" Value="4, 0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                                <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocusWithin" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                            <Setter TargetName="HintWrapper" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                                <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                                <Condition Property="IsKeyboardFocusWithin" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                                <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                            <Setter TargetName="border" Property="Margin" Value="0 24 0 0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                                <Condition Property="IsDropDownOpen" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Underline" Property="IsActive" Value="True"/>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                            <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="Validation.HasError" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                            <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="Validation.HasError" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="Underline" Property="Background" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Standard"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignPaper}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignBody}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Inverted"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignBody}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignPaper}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryLight" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueLightBrush}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryMid"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueMidBrush}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryDark"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueDarkBrush}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Accent"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource SecondaryAccentBrush}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource SecondaryAccentForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Light"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignLightBackground}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignLightForeground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                                <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Dark"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignDarkBackground}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignDarkForeground}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="TextFieldOutlineSmallStyle" TargetType="{x:Type TextBoxBase}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="materialDesign:TextFieldAssist.TextBoxViewMargin" Value="1 0 1 0" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}"/>
        <Setter Property="materialDesign:TextFieldAssist.IncludeSpellingSuggestions" Value="{Binding RelativeSource={RelativeSource Self}, Path=(SpellCheck.IsEnabled)}" />
        <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="materialDesign:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="True" />
        <Setter Property="materialDesign:TextFieldAssist.TextFieldCornerRadius" Value="4" />
        <Setter Property="materialDesign:HintAssist.IsFloating" Value="True"/>
        <!-- cludge the default context menu -->
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="Cut">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="ContentCut"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Copy">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="ContentCopy" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="Paste">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="ContentPaste"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" From="0" To="1" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform" From="0" To="1" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" To="0" BeginTime="0:0:0.45" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform" To="0" BeginTime="0:0:0.45" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="ScaleTransform" To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="ScaleTransform" To="0" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                Background="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}"
                                CornerRadius="{Binding Path=(materialDesign:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="{Binding Path=(materialDesign:TextFieldAssist.RippleOnFocusEnabled), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                RenderTransformOrigin="0.5,0.5">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="0" />
                            </Border.RenderTransform>
                        </Border>
                        <Border x:Name="textFieldBoxBorder" Background="{TemplateBinding Background}"
                                CornerRadius="{Binding Path=(materialDesign:TextFieldAssist.TextFieldCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Border x:Name="border"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        SnapsToDevicePixels="True"
                                        Padding="0 4 0 4">
                                    <Grid x:Name="textFieldGrid"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          MinWidth="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                                      HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                                      />
                                        <materialDesign:SmartHint x:Name="Hint"
                                                       Grid.Column="0"
                                                       HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HintProxyFabricConverter}}"
                                                       FontSize="{TemplateBinding FontSize}"
                                                       Padding="{TemplateBinding Padding}"
                                                       HintOpacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                                       UseFloating="{Binding Path=(materialDesign:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                                       FloatingScale="{Binding Path=(materialDesign:HintAssist.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                                                       FloatingOffset="{Binding Path=(materialDesign:HintAssist.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}">
                                            <materialDesign:SmartHint.Hint>
                                                <Border x:Name="HintBackgroundBorder" Background="Transparent" CornerRadius="2">
                                                    <ContentPresenter 
                                                        x:Name="HintWrapper" 
                                                        Content="{Binding Path=(materialDesign:HintAssist.Hint), RelativeSource={RelativeSource TemplatedParent}}"/>
                                                </Border>
                                            </materialDesign:SmartHint.Hint>
                                        </materialDesign:SmartHint>
                                        <StackPanel Orientation="Horizontal" Grid.Column="1" VerticalAlignment="Top" >
                                            <TextBlock VerticalAlignment="Bottom"
                                                   FontSize="{TemplateBinding FontSize}"
                                                   Opacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                                   Text="{Binding Path=(materialDesign:TextFieldAssist.SuffixText), RelativeSource={RelativeSource TemplatedParent}}"
                                                   />
                                            <Button x:Name="PART_ClearButton" Height="Auto" Padding="2,0,0,0"
                                                Style="{DynamicResource MaterialDesignToolButton}">
                                                <Button.Visibility>
                                                    <MultiBinding Converter="{StaticResource ClearTextConverter}">
                                                        <Binding ElementName="Hint" Path="IsContentNullOrEmpty" Converter="{StaticResource NotConverter}"/>
                                                        <Binding Path="(materialDesign:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    </MultiBinding>
                                                </Button.Visibility>
                                                <materialDesign:PackIcon Margin="0" Kind="CloseCircle" />
                                            </Button>
                                        </StackPanel>
                                    </Grid>
                                </Border>
                                <Border x:Name="textFieldBoxBottomLine"
                                        Background="{TemplateBinding BorderBrush}"
                                        Height="0"
                                        CornerRadius="{Binding Path=(materialDesign:TextFieldAssist.UnderlineCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Bottom"
                                        SnapsToDevicePixels="True" />
                                <Path x:Name="DashedLine"
                                      VerticalAlignment="Bottom"
                                      Visibility="Collapsed"
                                      Stretch="Fill"
                                      Data="M 0,0 L 1,0"
                                      StrokeThickness="{Binding BorderThickness.Bottom, ElementName=border, Converter={StaticResource DivisionMathConverter}, ConverterParameter=0.75}"
                                      StrokeDashArray="1,2.5"
                                      StrokeDashCap="Round"
                                      Stroke="{TemplateBinding BorderBrush}"
                                      Opacity="0.56" />
                                <materialDesign:Underline x:Name="Underline" Visibility="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"
                                               CornerRadius="{Binding Path=(materialDesign:TextFieldAssist.UnderlineCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                               Background="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                                <Canvas VerticalAlignment="Bottom">
                                    <TextBlock Canvas.Top="2" FontSize="10" MaxWidth="{Binding ActualWidth, ElementName=border}"
                                           Opacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                           Text="{Binding Path=(materialDesign:HintAssist.HelperText), RelativeSource={RelativeSource TemplatedParent}}" />
                                </Canvas>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="materialDesign:HintAssist.IsFloating" Value="True">
                            <Setter TargetName="border" Property="Margin" Value="0 18 0 0" />
                        </Trigger>
                        <Trigger Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="True">
                            <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}"/>
                            <Setter Property="VerticalContentAlignment" Value="Top" />
                            <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}" />
                            <Setter TargetName="textFieldBoxBorder" Property="Padding" Value="0,8,0,0" />
                            <Setter TargetName="textFieldGrid" Property="Margin" Value="16,0,16,0" />
                            <Setter TargetName="border" Property="BorderThickness" Value="0" />
                            <Setter TargetName="border" Property="Cursor" Value="IBeam" />
                            <Setter TargetName="Hint" Property="Margin" Value="0,0,0,16" />
                            <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,8,0,8" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="True" />
                                <Condition Property="materialDesign:HintAssist.IsFloating" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,0,0,8" />
                            <Setter TargetName="Hint" Property="Margin" Value="0,0,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="Height" Value="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="AcceptsReturn" Value="true" />
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="VerticalContentAlignment" Value="Top" />
                        </MultiTrigger>
                        <Trigger Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="True">
                            <Setter Property="VerticalContentAlignment" Value="Top" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="1" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaBorder}" />
                            <Setter TargetName="textFieldBoxBorder" Property="Padding" Value="0,8,0,0" />
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-1" />
                            <Setter TargetName="textFieldGrid" Property="Margin" Value="12,0,12,0" />
                            <Setter TargetName="border" Property="BorderThickness" Value="0" />
                            <Setter TargetName="border" Property="Cursor" Value="IBeam" />
                            <Setter TargetName="border" Property="Margin" Value="0 0 0 0" />
                            <Setter TargetName="Underline" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_ContentHost" Property="Margin" Value="0,0,0,8" />
                            <Setter TargetName="Hint" Property="Margin" Value="0,0,0,0" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                            <Setter TargetName="Hint" Property="FloatingOffset" Value="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource FontSizeToHintOffsetConverter}}" />
                            <Setter TargetName="HintWrapper" Property="Opacity" Value="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="HintBackgroundBorder" Property="Padding" Value="4, 0" />
                            <Setter TargetName="HintBackgroundBorder" Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HintWrapper" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_ContentHost" Property="Height" Value="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="AcceptsReturn" Value="true" />
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="VerticalContentAlignment" Value="Top" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.42" />
                            <Setter TargetName="textFieldBoxBottomLine" Property="Height" Value="0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="border" Value="0.42"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="false" />
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="DashedLine" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Underline" Property="IsActive" Value="True"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBottomLine" Property="Height" Value="2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="materialDesign:TextFieldAssist.NewSpecHighlightingEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="materialDesign:TextFieldAssist.NewSpecHighlightingEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="BorderThickness" Value="0,0,0,2" />
                            <Setter TargetName="border" Property="Padding" Value="0,4,0,3" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="materialDesign:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBorder" Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
                            <Setter TargetName="textFieldBoxBottomLine" Property="Height" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                        </MultiTrigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                            <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Validation.HasError" Value="True" />
                                <Condition Property="materialDesign:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBorder" Property="Margin" Value="-2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="textFieldBoxBorder" Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>